/**
 *  NEXUSe2e Business Messaging Open Source
 *  Copyright 2000-2021, direkt gruppe GmbH
 *
 *  This is free software; you can redistribute it and/or modify it
 *  under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation version 3 of
 *  the License.
 *
 *  This software is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this software; if not, write to the Free
 *  Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 *  02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
package org.nexuse2e.pojo;

// Generated 20.10.2006 15:50:01 by Hibernate Tools 3.2.0.beta6a

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.Access;
import javax.persistence.AccessType;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementWrapper;
import javax.xml.bind.annotation.XmlType;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.annotations.GenericGenerator;

/**
 * ChoreographyPojo generated by hbm2java
 */
@Entity
@Table(name = "nx_choreography")
@XmlType(name = "ChoreographyType")
@XmlAccessorType(XmlAccessType.NONE)
public class ChoreographyPojo implements NEXUSe2ePojo {

    /**
     * 
     */
    private static final long    serialVersionUID = -1243027671326649219L;

    // Fields    

    @Access(AccessType.PROPERTY)
    @Id
    @Column(name = "nx_choreography_id")
    @GeneratedValue(strategy = GenerationType.AUTO, generator = "native")
    @GenericGenerator(name = "native", strategy = "native")
    private int                  nxChoreographyId;

    @Column(name = "description", length = 255)
    private String               description;

    @Column(name = "name", length = 255, nullable = false, unique = true)
    private String               name;

    @Column(name = "created_date")
    @Temporal(TemporalType.TIMESTAMP)
    private Date                 createdDate;

    @Column(name = "modified_date")
    @Temporal(TemporalType.TIMESTAMP)
    private Date                 modifiedDate;

    @Column(name = "modified_nx_user_id", nullable = false)
    private int                  modifiedNxUserId;

    @OneToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = "choreography")
    @Fetch(value = FetchMode.SELECT)
    @XmlElementWrapper(name = "Participants")
    @XmlElement(name = "Participant")
    private List<ParticipantPojo> participants     = new ArrayList<ParticipantPojo>( 0 );

    @OneToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = "choreography")
    @Fetch(value = FetchMode.SELECT)
    @XmlElementWrapper(name = "Actions")
    @XmlElement(name = "Action")
    private Set<ActionPojo>      actions          = new HashSet<ActionPojo>( 0 );

    // Constructors

    /** default constructor */
    public ChoreographyPojo() {
        createdDate = new Date();
        modifiedDate = createdDate;
    }

    /** minimal constructor */
    public ChoreographyPojo( Date createdDate, Date modifiedDate, int modifiedNxUserId ) {

        this.createdDate = createdDate;
        this.modifiedDate = modifiedDate;
        this.modifiedNxUserId = modifiedNxUserId;
    }

    /** full constructor */
    public ChoreographyPojo( String description, String name, Date createdDate, Date modifiedDate,
            int modifiedNxUserId, List<ParticipantPojo> participants, Set<ActionPojo> actions ) {

        this.description = description;
        this.name = name;
        this.createdDate = createdDate;
        this.modifiedDate = modifiedDate;
        this.modifiedNxUserId = modifiedNxUserId;
        this.participants = participants;
        this.actions = actions;
    }

    // Property accessors
    @XmlAttribute
    public int getNxChoreographyId() {

        return this.nxChoreographyId;
    }

    public void setNxChoreographyId( int nxChoreographyId ) {

        this.nxChoreographyId = nxChoreographyId;
    }

    public int getNxId() {
        return nxChoreographyId;
    }
    
    public void setNxId( int nxId ) {
        this.nxChoreographyId = nxId;
    }
    
    @XmlAttribute
    public String getDescription() {

        return this.description;
    }

    public void setDescription( String description ) {

        this.description = description;
    }

    @XmlAttribute
    public String getName() {

        return this.name;
    }

    public void setName( String name ) {

        this.name = name;
    }

    public Date getCreatedDate() {

        return this.createdDate;
    }

    public void setCreatedDate( Date createdDate ) {

        this.createdDate = createdDate;
    }

    public Date getModifiedDate() {

        return this.modifiedDate;
    }

    public void setModifiedDate( Date modifiedDate ) {

        this.modifiedDate = modifiedDate;
    }

    public int getModifiedNxUserId() {

        return this.modifiedNxUserId;
    }

    public void setModifiedNxUserId( int modifiedNxUserId ) {

        this.modifiedNxUserId = modifiedNxUserId;
    }

    public List<ParticipantPojo> getParticipants() {

        return this.participants;
    }

    public void setParticipants( List<ParticipantPojo> participants ) {

        this.participants = participants;
    }

    public Set<ActionPojo> getActions() {

        return this.actions;
    }

    public void setActions( Set<ActionPojo> actions ) {

        this.actions = actions;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals( Object obj ) {

        if ( obj instanceof ChoreographyPojo ) {
            if ( nxChoreographyId == 0 ) {
                return super.equals( obj );
            }
            return ( nxChoreographyId == ( (ChoreographyPojo) obj ).getNxChoreographyId() );
        }
        return false;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {

        if ( nxChoreographyId == 0 ) {
            return super.hashCode();
        }

        return nxChoreographyId;
    }

}
