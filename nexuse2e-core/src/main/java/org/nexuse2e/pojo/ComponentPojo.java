/**
 *  NEXUSe2e Business Messaging Open Source
 *  Copyright 2000-2021, direkt gruppe GmbH
 *
 *  This is free software; you can redistribute it and/or modify it
 *  under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation version 3 of
 *  the License.
 *
 *  This software is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this software; if not, write to the Free
 *  Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 *  02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
package org.nexuse2e.pojo;

// Generated 02.11.2006 11:50:54 by Hibernate Tools 3.2.0.beta6a

import org.hibernate.annotations.GenericGenerator;

import java.util.Date;

import jakarta.persistence.Access;
import jakarta.persistence.AccessType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;

/**
 * ComponentPojo generated by hbm2java
 */
@Entity
@Table(name = "nx_component")
@XmlType(name = "ComponentType")
@XmlAccessorType(XmlAccessType.NONE)
public class ComponentPojo implements NEXUSe2ePojo {

    /**
     * 
     */
    private static final long serialVersionUID = 4673827674202399344L;

    // Fields
    @Access(AccessType.PROPERTY)
    @Id
    @Column(name = "nx_component_id")
    @GeneratedValue(strategy = GenerationType.AUTO, generator = "native")
    @GenericGenerator(name = "native", strategy = "native")
    private int               nxComponentId;

    @Column(name = "created_date", nullable = false)
    @Temporal(TemporalType.TIMESTAMP)
    private Date              createdDate;

    @Column(name = "modified_date", nullable = false)
    @Temporal(TemporalType.TIMESTAMP)
    private Date              modifiedDate;

    @Column(name = "modified_nx_user_id", nullable = false)
    private int               modifiedNxUserId;

    @Column(name = "type", nullable = false)
    private int               type;

    @Column(name = "name", nullable = false, length = 64)
    private String            name;

    @Column(name = "class_name", nullable = false, length = 1024)
    private String            className;

    @Column(name = "description", length = 64)
    private String            description;

    // Constructors

    /** default constructor */
    public ComponentPojo() {
        createdDate = new Date();
        modifiedDate = createdDate;
    }

    /** minimal constructor */
    public ComponentPojo( Date createdDate, Date modifiedDate, int modifiedNxUserId, int type, String name,
            String className ) {

        this.createdDate = createdDate;
        this.modifiedDate = modifiedDate;
        this.modifiedNxUserId = modifiedNxUserId;
        this.type = type;
        this.name = name;
        this.className = className;
    }

    /** full constructor */
    public ComponentPojo( Date createdDate, Date modifiedDate, int modifiedNxUserId, int type, String name,
            String className, String description ) {

        this.createdDate = createdDate;
        this.modifiedDate = modifiedDate;
        this.modifiedNxUserId = modifiedNxUserId;
        this.type = type;
        this.name = name;
        this.className = className;
        this.description = description;
    }

    // Property accessors
    @XmlAttribute
    public int getNxComponentId() {

        return this.nxComponentId;
    }

    public void setNxComponentId( int nxComponentId ) {

        this.nxComponentId = nxComponentId;
    }

    public int getNxId() {
        return nxComponentId;
    }
    
    public void setNxId( int nxId ) {
        this.nxComponentId = nxId;
    }
    
    public Date getCreatedDate() {

        return this.createdDate;
    }

    public void setCreatedDate( Date createdDate ) {

        this.createdDate = createdDate;
    }

    public Date getModifiedDate() {

        return this.modifiedDate;
    }

    public void setModifiedDate( Date modifiedDate ) {

        this.modifiedDate = modifiedDate;
    }

    public int getModifiedNxUserId() {

        return this.modifiedNxUserId;
    }

    public void setModifiedNxUserId( int modifiedNxUserId ) {

        this.modifiedNxUserId = modifiedNxUserId;
    }

    @XmlAttribute
    public int getType() {

        return this.type;
    }

    public void setType( int type ) {

        this.type = type;
    }

    @XmlAttribute
    public String getName() {

        return this.name;
    }

    public void setName( String name ) {

        this.name = name;
    }

    @XmlAttribute
    public String getClassName() {

        return this.className;
    }

    public void setClassName( String className ) {

        this.className = className;
    }

    @XmlAttribute
    public String getDescription() {

        return this.description;
    }

    public void setDescription( String description ) {

        this.description = description;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals( Object obj ) {

        if ( obj instanceof ComponentPojo ) {
            if ( nxComponentId == 0 ) {
                return super.equals( obj );
            }
            return ( nxComponentId == ( (ComponentPojo) obj ).getNxComponentId() );
        }
        return false;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {

        if ( nxComponentId == 0 ) {
            return super.hashCode();
        }

        return nxComponentId;
    }

    public boolean isSubtypeOf( Class<?> clazz ) {
        if (clazz == null) {
            return false;
        }
        try {
            Class<?> thisClazz = Class.forName( getClassName() );
            return (clazz.isAssignableFrom( thisClazz ));
        } catch (Exception ignored) {
        }
        return false;
    }
}
